#pragma version >=0.2.0;
#include "utils/helpers.func";
#include "utils/params.func";
#include "utils/op-codes.func";

int min_gas_amount() asm "1000000000 PUSHINT";
int ADDR_SIZE() asm "256 PUSHINT";
const int min_tons_for_storage = 50000000;

(int, cell) load_data() {
  var ds = get_data().begin_parse();
  return (
      ds~load_uint(8),
      ds~load_ref() 
  );
}

(int, slice, int) load_fees(cell fees_cell) inline {
  var ds = fees_cell.begin_parse();
  return (
      ds~load_coins(), ;; marketplace_fee,
      ds~load_msg_addr(), ;; royalty_address 
      ds~load_coins() ;; royalty_amount
  );
}

() save_data(int state, cell fees_cell) impure inline {
  set_data(begin_cell()
    .store_uint(state, 8)
    .store_ref(fees_cell)
    .end_cell()
  );
}

int balance() inline_ref method_id {
    return get_balance().pair_first();
}

() send_money(slice in_msg_body, slice to_addr, int amount) impure inline {
    ;;int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(to_addr)
            .store_coins(amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op_transfer_money, 32)
            .store_uint(query_id, 64);

    send_raw_message(msg.end_cell(), 3);
}

() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
    var msg = begin_cell()
            .store_uint(0x10, 6) 
            .store_slice(to_address)
            .store_coins(amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op, 32)
            .store_uint(query_id, 64);

    if (~ builder_null?(payload)) {
        msg = msg.store_builder(payload);
    }

    send_raw_message(msg.end_cell(), send_mode);
}

() transfer_ownership(slice in_msg_body, int my_balance, slice sender_address, slice owner_address, int fwd_fees) impure inline {
    
    int query_id = in_msg_body~load_uint(64);
    slice new_owner_address = in_msg_body~load_msg_addr();
    force_chain(new_owner_address);
    
    slice response_destination = in_msg_body~load_msg_addr();
    in_msg_body~load_int(1); 
    int forward_amount = in_msg_body~load_coins();

    int balance = pair_first(get_balance());
    int rest_amount = balance - min_tons_for_storage;
    if (forward_amount) {
      rest_amount -= (forward_amount + fwd_fees);
    }
    int need_response = response_destination.preload_uint(2) != 0; 
    if (need_response) {
      rest_amount -= fwd_fees;
    }

    throw_unless(402, rest_amount >= 0); 

    if (forward_amount) {
      send_msg(new_owner_address, forward_amount, op_ownership_assigned, query_id, begin_cell().store_slice(owner_address).store_slice(in_msg_body), 1); 
    }
    if (need_response) {
      force_chain(response_destination);
      send_msg(response_destination, rest_amount, op_excesses, query_id, null(), 1); 
    }

}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    int balance = pair_first(get_balance());

    if(in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int fl = cs~load_uint(4);
    if(fl & 1) {
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (state, fees_cell) = load_data();

    int amount = in_msg_body~load_coins();
    
    var (marketplace_fee, royalty_address, royalty_amount) = load_fees(fees_cell);

    if(state == 1) {
        if(op == op_transfer_money) {  ;; send money
            cell dict = in_msg_body~load_dict();

            do {
                var (index, data, f?) = dict~udict::delete_get_min(64);   
            if(f?) {
                throw_unless(118, balance >= marketplace_fee + royalty_amount);
                send_money(in_msg_body, data~load_msg_addr(), data~load_coins());
            }
            } until ( ~ f?);

            int new_state = 2;
            save_data(new_state, fees_cell);
            return ();
        }
    }   

    elseif(state == 2) {
        if(op == op_transfer) {
            slice sender_address = cs~load_msg_addr();
            slice to_addr = in_msg_body~load_msg_addr(); ;; destination addr
            transfer_ownership(in_msg_body, balance, sender_address, to_addr, marketplace_fee + royalty_amount);
            int new_state = 1;
            save_data(new_state, fees_cell);
            return ();
            
        }
    }
}

() recv_external(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}