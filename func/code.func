#pragma version >=0.2.0;
#include "utils/helpers.func";
#include "utils/params.func";
#include "utils/op-codes.func";

int min_gas_amount() asm "1000000000 PUSHINT";
int ADDR_SIZE() asm "256 PUSHINT";
const int min_tons_for_storage = 50000000;

_ set_up_fees(int fee) inline_ref {
    return begin_cell()
        .store_coins(fee)
        .end_cell();
}

(int) load_all_fees() inline {
    var ds = get_data().begin_parse();
    return ds~load_coins();
}

int balance() inline_ref method_id {
    return get_balance().pair_first();
}

() set_up_state(int state) impure inline_ref {
    set_data(begin_cell().store_uint(state, 8).end_cell());
}

(int) load_cur_state() inline { ;; 1 - not inited state; 2 - inited state
    var ds = get_data().begin_parse();
    return ds~load_uint(8);
}

() send_money(int mode, slice to_addr, int amount, int op, int query_id) impure inline {
    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(to_addr)
            .store_coins(amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op, 32)
            .store_uint(query_id, 64);

    send_raw_message(msg.end_cell(), mode);
}

() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
    var msg = begin_cell()
            .store_uint(0x10, 6) 
            .store_slice(to_address)
            .store_coins(amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op, 32)
            .store_uint(query_id, 64);

    if (~ builder_null?(payload)) {
        msg = msg.store_builder(payload);
    }

    send_raw_message(msg.end_cell(), send_mode);
}

() transfer_ownership(int my_balance, slice sender_address, int query_id, slice in_msg_body, int fwd_fees) impure inline {

    slice new_owner_address = in_msg_body~load_msg_addr();
    force_chain(new_owner_address);
    
    slice response_destination = in_msg_body~load_msg_addr();
    in_msg_body~load_int(1); 
    int forward_amount = in_msg_body~load_coins();

    int balance = pair_first(get_balance());
    int rest_amount = balance - min_tons_for_storage;
    if (forward_amount) {
      rest_amount -= (forward_amount + fwd_fees);
    }
    int need_response = response_destination.preload_uint(2) != 0; 
    if (need_response) {
      rest_amount -= fwd_fees;
    }

    throw_unless(402, rest_amount >= 0); 

    if (forward_amount) {
      send_msg(new_owner_address, forward_amount, op_ownership_assigned, query_id, begin_cell().store_slice(in_msg_body), 1); 
    }
    if (need_response) {
      force_chain(response_destination);
      send_msg(response_destination, rest_amount, op_excesses, query_id, null(), 1); 
    }

}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    int balance = pair_first(get_balance());

    if(in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int fl = cs~load_uint(4);
    if(fl & 1) {
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    int fee = load_all_fees();

    int cur_state = load_cur_state();
    int amount = in_msg_body~load_coins();

    if(cur_state == 1) {
        if(op == 1) {  ;; send money
            cell dict = in_msg_body~load_dict();

            do {
                var (index, data, f?) = dict~udict::delete_get_min(64);   
            if(f?) {
                throw_unless(118, balance >= amount + fee);
                send_money(64, data~load_msg_addr(), data~load_coins(), op, query_id);
            }
            } until ( ~ f?);

        cur_state = 2;
        return ();
        }
    }   

    elseif(cur_state == 2) {
        if(op == op_transfer) {
            slice sender_address = cs~load_msg_addr();
            transfer_ownership(balance, sender_address, query_id, in_msg_body, fee);
            cur_state = 1;
            return ();
            
        }
    }
}

() recv_external(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}