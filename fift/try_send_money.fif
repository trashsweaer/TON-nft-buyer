"Asm.fif" include
"TonUtil.fif" include

"EQDlT07NpSh0uj-aSBkF2TRxOqR2nw0ErOQsA6TYakr1-FxP" constant to_address2
"EQAV6qFczWhKjeem20ZsxC3bu0dWgVUrtA9WXxDS7OyvOS66" constant to_address3

"EQDRebAnF1pvH1YsKNp7mtpsz+CLs6WxaffUojt1ijyrazkg" constant sender_address

sender_address
$>smca 0= abort"Specify valid send addr"
drop  

2constant send_addr

to_address2
$>smca 0= abort"Specify valid to addr2"
drop

2constant to_addr2

to_address3
$>smca 0= abort"Specify valid to addr3"
drop

2constant to_addr3

variable orders   dictnew orders !
variable order# order# 0!

{ <s order# @ dup 254 >= abort"more than 254 orders"
  orders @ 256 udict!+ not abort"cannot add order to dictionary"
  orders ! order# 1+!
} : add-order

{ <b to_addr3 Addr, 10000 Gram, b> } : create-order

{ tuck <s 2dup 1 s-fits-with? not rot over 1 i, -rot
  { drop swap ref, } { s, nip } cond
} : append-msg-body

{ <b b{01} s, rot 1 i, b{000100} s, 2swap addr, rot Gram,
  0 9 64 32 + + 1+ u, swap append-msg-body b>
} : create-int-msg


{ swap parse-smc-addr force-bounce or allow-bounce and  
  2over 2over .transfer
  <b 0xf8a7ea5 32 u, b> create-int-msg
} : create-simple-transfer

{ create-simple-transfer send-mode create-order add-order } : send

{ ."Transferring " 3 roll .GR ."to account " 
  -rot 2dup 4 pick 7 + .Addr ." = " .addr ." bounce=" . cr
} : .transfer

{ create-simple-transfer send-mode create-order add-order } : send

now timeout + 32 << <b orders @ dict, b> hashu 32 1<<1- and + =: query_id
<b query_id 64 u, orders @ dict, b>

<b b{1000100} s, wallet_addr addr, 0 Gram, b{00} s,
   swap B, swap <s s, b>
